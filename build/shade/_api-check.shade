@{

    var srcRoot = Path.Combine(BASE_DIR, "src");
    var srcFolders = Directory.Exists(srcRoot) ? Directory.EnumerateDirectories(srcRoot) : Enumerable.Empty<string>();

    var fullFrameworkMonikerPrefix = new string[] { "net45", "net46" };
    var coreMonikerPrefix = new string[] { "netcoreapp", "netstandard" };

    var generateApiListing = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("APICHECK_GENERATE_BASELINE"));
    var excludePublicInternalTypes = string.IsNullOrEmpty(Environment.GetEnvironmentVariable("APICHECK_INCLUDE_PUBLIC_INTERNAL_TYPES"));

    foreach (var srcProjectPath in srcFolders)
    {
        var srcDirectory = new DirectoryInfo(srcProjectPath);
        if (!srcDirectory.Exists)
        {
            break;
        }

        var projectFile = new FileInfo(Path.Combine(srcDirectory.FullName, srcDirectory.Name + ".csproj"));
        if (!projectFile.Exists)
        {
            continue;
        }

        if (!IsLinux)
        {
            RunApiCheck(srcDirectory, Configuration, fullFrameworkMonikerPrefix, "net45", generateApiListing, excludePublicInternalTypes);
            RunApiCheck(srcDirectory, Configuration, coreMonikerPrefix, "netcore", generateApiListing, excludePublicInternalTypes);
        }
    }
}

functions @{

    string GenerateApiCheckInvoker(string framework)
    {
        var BASE_DIR = Directory.GetCurrentDirectory();
        var apicheckBasePath = Directory.EnumerateDirectories(Path.Combine(BASE_DIR, ".build", "Microsoft.AspNetCore.BuildTools.ApiCheck")).First();
        var apiCheckFullFramework = new FileInfo(Path.Combine(apicheckBasePath, "tools", "net451", "Microsoft.AspNetCore.BuildTools.ApiCheck.exe"));

        if (framework == "net45")
        {
            return apiCheckFullFramework.FullName;
        }
        else
        {
            return "dotnet";
        }
    }

    IList<string> GenerateApiCheckArguments(string framework, params string [] other)
    {
        var BASE_DIR = Directory.GetCurrentDirectory();
        var apicheckBasePath = Directory.EnumerateDirectories(Path.Combine(BASE_DIR, ".build", "Microsoft.AspNetCore.BuildTools.ApiCheck")).First();
        var apiCheckCore = new FileInfo(Path.Combine(apicheckBasePath, "tools", "netcoreapp1.0", "Microsoft.AspNetCore.BuildTools.ApiCheck.dll"));

        if (framework == "net45")
        {
            return other.ToList();
        }
        else
        {
            return new List<string>{ apiCheckCore.FullName }.Concat(other).ToList();
        }
    }

    void RunApiCheck(
        DirectoryInfo directoryInfo,
        string configuration,
        string[] monikerPrefix,
        string framework,
        bool generate,
        bool excludePublicInternalTypes)
    {
        var apiListingFile = framework == "net45" ? "baseline.net45.json" : "baseline.netcore.json";
        var apiListingExceptionsFile = framework == "net45" ? "exceptions.net45.json" : "exceptions.netcore.json";

        var buildFolder = new DirectoryInfo(Path.Combine(directoryInfo.FullName, "bin", configuration));
        if (!buildFolder.Exists)
        {
            Log.Info("No build folder found for " + Path.Combine(directoryInfo.FullName, "bin", configuration));
            return;
        }

        var assetsJson = new FileInfo(Path.Combine(directoryInfo.FullName, "obj", "project.assets.json"));
        if(!assetsJson.Exists)
        {
            Log.Info("No project.assets.json file found " + Path.Combine(directoryInfo.FullName, "bin", configuration));
            return;
        }

        FileInfo dll = null;
        foreach (var prefix in monikerPrefix)
        {
            var frameworkDirectory = buildFolder.EnumerateDirectories(string.Concat(prefix,"*")).FirstOrDefault();
            if (frameworkDirectory != null && frameworkDirectory.EnumerateDirectories().Any())
            {
                frameworkDirectory = frameworkDirectory.EnumerateDirectories().FirstOrDefault(d =>
                    d.EnumerateFiles(string.Concat(directoryInfo.Name,".dll")).Any());
            }

            if (frameworkDirectory != null)
            {
                dll = frameworkDirectory.EnumerateFiles(string.Concat(directoryInfo.Name,".dll")).FirstOrDefault();
                if (dll != null)
                {
                    break;
                }
            }
        }

        if (dll != null)
        {
            var apiListing = directoryInfo.EnumerateFiles(apiListingFile).FirstOrDefault();
            var apiListingExceptions = directoryInfo.EnumerateFiles(apiListingExceptionsFile).FirstOrDefault();

            if (generate)
            {
                var arguments = GenerateApiCheckArguments(framework,
                    "generate",
                    "-a " + dll.FullName,
                    "-p " + assetsJson.FullName,
                    "-o " + Path.Combine(directoryInfo.FullName, apiListingFile));

                Exec(GenerateApiCheckInvoker(framework), string.Join(" ",arguments));
            }
            else if (apiListing == null)
            {
                Log.Info("API listing not found for: " + dll.FullName);
                Log.Info("To learn more about generating baselines go to: https://github.com/aspnet/BuildTools/wiki/Api-Check");
            }
            else
            {
                var arguments = GenerateApiCheckArguments(framework,
                    "compare",
                    "-b " + apiListing.FullName,
                    "-a " + dll.FullName,
                    "-p " + assetsJson.FullName);
                
                if (apiListingExceptions != null)
                {
                    arguments.Add("-e " + apiListingExceptions.FullName);
                }

                if (excludePublicInternalTypes)
                {
                    // Excludes types in the internal namespace
                    arguments.Add("-epi");
                }

                Exec(GenerateApiCheckInvoker(framework), string.Join(" ", arguments));
            }
        }
    }
}