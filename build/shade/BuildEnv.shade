use namespace="System"

functions
  @{
    string CreateDayBasedVersionNumber()
    {
        var start = new DateTime(2015, 1, 1);
        var now = DateTime.UtcNow;

        string version = "0";
        // If the computer date is set before the start date, then the version is 0
        if (now >= start)
        {
            var yearsSinceStart = (now.Year - start.Year) + 1;
            version = yearsSinceStart + now.ToString("MMdd");
        }

        return version;
    }

    private string _buildQuality;

    string BuildQuality
    {
        get
        {
            if (_buildQuality == null)
            {
                var buildQualityFilePath = Path.Combine(KoreBuildFolderPath, "build-quality.txt");
                _buildQuality = File.ReadAllText(buildQualityFilePath);
            }

            return _buildQuality;
        }
        set
        {
            _buildQuality = value;
        }
    }

    string BuildNumber
    {
        get
        {
            var buildNumber = Environment.GetEnvironmentVariable("KOREBUILD_BUILD_NUMBER");
            if (string.IsNullOrEmpty(buildNumber))
            {
                return "t" + DateTime.UtcNow.ToString("yyMMddHHmmss");
            }

            return BuildQuality + "-" + buildNumber;
        }
    }

    string DotBuildFolderPath
    {
        get
        {
            return Environment.GetEnvironmentVariable("BUILD_FOLDER");
        }
    }

    string KoreBuildFolderPath
    {
        get
        {
            return Environment.GetEnvironmentVariable("KOREBUILD_FOLDER");
        }
    }

    bool IsTeamCity
    {
        get { return !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("TEAMCITY_VERSION")); }
    }

    bool IsTravisCi
    {
        get { return !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("TRAVIS")) &&
                !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("CONTINUOUS_INTEGRATION")); }
    }
}