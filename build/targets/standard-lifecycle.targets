<Project>

  <Import Project="DefaultItems.targets" />

<!--
###################################################################
Standard lifecycle targets.

When extending the solution build, chain off one of these
###################################################################
-->

  <Target Name="Clean" DependsOnTargets="CleanArtifacts;CleanSolutions"/>

  <Target Name="Initialize" DependsOnTargets="RestoreSolutions" />

  <Target Name="Compile" DependsOnTargets="BuildSolutions" />

  <Target Name="Package" DependsOnTargets="PackageProjects;PackSharedSources" />

  <Target Name="Test" DependsOnTargets="TestProjects" />

  <Target Name="Verify" DependsOnTargets="VerifyPackages" />

  <Target Name="Build" DependsOnTargets="Clean;Initialize;Compile;Package;Test;Verify" />

<!--
###################################################################
Convenience targets.

These are not part of the standard lifecycle but are useful
###################################################################
-->

  <Target Name="Rebuild" DependsOnTargets="RebuildSolutions" />

  <!-- TODO implement. See https://github.com/aspnet/BuildTools/issues/162 -->
  <Target Name="Resx" />

<!--
###################################################################
Individual build steps.

Repos that customize the build should not rely on these existing
as they are subject to change.
###################################################################
-->

  <Target Name="CleanArtifacts">
    <!-- intentionally BuildDir, not ArtifactDir -->
    <RemoveDir Directories="$(BuildDir)" />
  </Target>

<!--
###################################################################
Targets: {Target}Solutions

Items: Solutions
Properties: ExcludeSolutions

Executes /t:{Target} on all solutions
###################################################################
-->
  <PropertyGroup>
    <_SolutionWasBuilt>false</_SolutionWasBuilt>
    <!-- ensure its value doesn't invalidate MSBuild build cache -->
    <_BuildPropertiesToRemove>$(_BuildPropertiesToRemove);_SolutionWasBuilt</_BuildPropertiesToRemove>

    <BuildInParallel>true</BuildInParallel>
  </PropertyGroup>

  <Target Name="_ResolveSolutions">
    <RemoveDuplicates Inputs="@(Solutions)">
      <Output TaskParameter="Filtered" ItemName="_SolutionItems" />
    </RemoveDuplicates>

    <Error Text="No solutions found to build" Condition="'@(_SolutionItems)' == ''" />
  </Target>

  <Target Name="CleanSolutions" DependsOnTargets="_ResolveSolutions">
    <MSBuild Targets="Clean"
      Projects="@(_SolutionItems)"
      Properties="Configuration=$(Configuration)" />
  </Target>

  <Target Name="RestoreSolutions" DependsOnTargets="_ResolveSolutions">
    <MSBuild Targets="Restore"
      Projects="@(_SolutionItems)"
      Properties="Configuration=$(Configuration)" />
  </Target>

  <Target Name="BuildSolutions" DependsOnTargets="_ResolveSolutions">
    <MSBuild Targets="Build"
      Projects="@(_SolutionItems)"
      Properties="Configuration=$(Configuration)"
      BuildInParallel="$(BuildInParallel)"
      RemoveProperties="$(_BuildPropertiesToRemove)" />

    <PropertyGroup>
      <_SolutionWasBuilt>true</_SolutionWasBuilt>
    </PropertyGroup>
  </Target>

  <Target Name="RebuildSolutions" DependsOnTargets="_ResolveSolutions">
    <MSBuild Targets="Rebuild"
      Projects="@(_SolutionItems)"
      Properties="Configuration=$(Configuration)"
      RemoveProperties="$(_BuildPropertiesToRemove)" />

    <PropertyGroup>
      <_SolutionWasBuilt>true</_SolutionWasBuilt>
    </PropertyGroup>
  </Target>

<!--
###################################################################
Target: PackageProjects

Executes /t:Pack on all projects matching src/*/*.csproj.
###################################################################
-->
  <Target Name="PackageProjects">
    <!-- TODO consider using GeneratePackageOnBuild or calling Pack on the solution.
        This would require setting IsPackable=false and samples and possible on tests (see https://github.com/NuGet/NuGet.Client/pull/1170) -->
    <RemoveDuplicates Inputs="@(ProjectsToPack)">
      <Output TaskParameter="Filtered" ItemName="_PackProjectItems" />
    </RemoveDuplicates>

    <PropertyGroup>
      <!-- TODO remove when we stop using Sake. Because Sake invokes the project multiple times, so this value is always false -->
      <!--<PackageNoBuild Condition="'$(PackageNoBuild)' == ''">$(_SolutionWasBuilt)</PackageNoBuild>-->
      <PackageNoBuild>true</PackageNoBuild>
    </PropertyGroup>

    <MSBuild Targets="Pack"
      Projects="@(_PackProjectItems)"
      Condition="'@(_PackProjectItems)' != ''"
      Properties="Configuration=$(Configuration);PackageOutputPath=$(BuildDir);NoBuild=$(PackageNoBuild)"
      BuildInParallel="$(BuildInParallel)"
      RemoveProperties="$(_BuildPropertiesToRemove);PackageNoBuild" />
  </Target>

<!--
###################################################################
Target: PackSharedSources

Creates a content files package for all each directory in
that matches "$(RepositoryRoot)/shared/*.Sources".
###################################################################
-->
  <Target Name="PackSharedSources" Condition="Exists('$(SharedSourcesFolder)') OR '@(SharedSourceDirectories)' != ''">
    <RemoveDuplicates Inputs="@(SharedSourceDirectories)">
      <Output TaskParameter="Filtered" ItemName="_SharedSourceItems" />
    </RemoveDuplicates>

    <Message Importance="normal"
      Text="Producing shared source package for %(_SharedSourceItems.Identity)"
      Condition="'@(_SharedSourceItems)' != ''" />

    <MSBuild Targets="Pack"
      Projects="$(MSBuildThisFileDirectory)..\shared\sharedsources.csproj"
      Properties="PackageOutputPath=$(BuildDir);RepositoryRoot=$(RepositoryRoot);NuspecBasePath=%(_SharedSourceItems.Identity);PackageId=%(FileName)%(Extension)"
      Condition="'@(_SharedSourceItems)' != ''"
      BuildInParallel="$(BuildInParallel)" />
  </Target>

<!--
###################################################################
Target: TestProjects

Items: ProjectsToTest. Defaults to test/*/*.csproj
Properties: ExcludeFromTest. ItemSpec for projects to avoid testing.

Runs the VSTest on all projects in the ProjectsToTest itemgroup.
###################################################################
-->

  <PropertyGroup>
    <!-- TODO if VS Test doesn't make minimal output the default log setting, we can set that here. cref https://github.com/Microsoft/vstest/issues/301 -->
    <VSTestLogger Condition=" '$(VSTestLogger)' == '' AND '$(TEAMCITY_VERSION)' != '' ">trx</VSTestLogger>
    <IgnoreFailingTestProjects>false</IgnoreFailingTestProjects>
    <IgnoreFailingTestProjects Condition="'$(KOREBUILD_IGNORE_DOTNET_TEST_EXIT_CODE)' == '1'">true</IgnoreFailingTestProjects>
  </PropertyGroup>

  <Target Name="TestProjects">
    <RemoveDuplicates Inputs="@(ProjectsToTest)">
      <Output TaskParameter="Filtered" ItemName="_TestProjectItems" />
    </RemoveDuplicates>

    <Message Text="Running tests for:%0A@(_TestProjectItems -> '%(FileName)','%0A')" Importance="High" />

    <PropertyGroup>
      <VSTestNoBuild Condition="'$(VSTestNoBuild)' == ''">$(_SolutionWasBuilt)</VSTestNoBuild>
      <_TestContinueOnError Condition="'$(IgnoreFailingTestProjects)' == 'true'">ErrorAndContinue</_TestContinueOnError>
      <_TestContinueOnError Condition="'$(IgnoreFailingTestProjects)' != 'true'">ErrorAndStop</_TestContinueOnError>
    </PropertyGroup>

    <!-- Intentional use of batching ('%') instead of passing items ('@') so that tests fail sooner -->
    <MSBuild Projects="%(_TestProjectItems.Identity)"
      Targets="VSTest"
      Properties="Configurationf=$(Configuration);VSTestLogger=$(VSTestLogger);VSTestNoBuild=$(VSTestNoBuild)"
      Condition="'@(_TestProjectItems)' != ''"
      ContinueOnError="$(_TestContinueOnError)"
      RemoveProperties="$(_BuildPropertiesToRemove);_TestContinueOnError" />

  </Target>

<!--
###################################################################
Target: VerifyPackages

Runs the NuGet Package Verifier on all nupkgs in build output.
Only runs if a file named NuGetPackageVerifier.json is in the
repository root.
###################################################################
-->
  <PropertyGroup>
    <NuGetVerifierRuleFile>$(RepositoryRoot)NuGetPackageVerifier.json</NuGetVerifierRuleFile>
  </PropertyGroup>

  <Target Name="VerifyPackages">
    <ItemGroup>
      <Packages Include="$(BuildDir)*.nupkg" />
    </ItemGroup>

    <Warning Text="No nupkg found in '$(BuildDir)'." Condition="$(Packages -> Count()) == 0" />
    <Warning Text="Skipping nuget package verification because artifacts directory could not be found"
      Condition="!Exists('$(BuildDir)')" />

    <VerifyPackages ArtifactDirectory="$(BuildDir)"
      RuleFile="$(NuGetVerifierRuleFile)"
      Condition="Exists('$(NuGetVerifierRuleFile)') AND Exists('$(BuildDir)')" />
  </Target>

</Project>